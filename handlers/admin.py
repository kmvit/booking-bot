from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from datetime import datetime
from models.database import get_db, Client, Appointment, InactiveSlot
from config import ADMIN_IDS
from scheduler.notifier import send_reminder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from services.booking import (
    create_appointment, get_available_slots,
    get_procedures, get_procedure_by_id,
    delete_appointment,
    notify_admins_about_new_appointment,
    set_inactive_slot, remove_inactive_slot,
    get_inactive_slots
)

router = Router()

class AdminStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_phone = State()
    waiting_for_username = State()
    waiting_for_procedure = State()
    waiting_for_inactive_date = State()
    waiting_for_inactive_date_removal = State()
    waiting_for_inactive_time = State()
    waiting_for_inactive_time_removal = State()

def admin_filter(message: Message):
    return message.from_user.id in ADMIN_IDS

@router.message(Command("admin"), admin_filter)
async def cmd_admin(message: Message):
    await message.answer(
        "üë®‚Äç‚öïÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_admin_keyboard()
    )

@router.message(F.text == "üìä –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π", admin_filter)
async def show_appointments(message: Message):
    db = next(get_db())
    today = datetime.now().date()
    appointments = db.query(Appointment).filter(
        Appointment.date >= today,
        Appointment.status == 'scheduled'
    ).order_by(Appointment.date).all()
    
    if not appointments:
        await message.answer("–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
        return
    
    text = "üìä –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:\n\n"
    for app in appointments:
        client = app.client
        text += (
            f"ID: {app.id}\n"
            f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {app.procedure.name}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {app.procedure.duration}—á\n"
            f"üìÖ {app.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë§ {client.name} (@{client.username})\n"
            f"üì± {client.phone or '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        )
    
    await message.answer(text, reply_markup=create_appointments_list_keyboard(appointments))

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", admin_filter)
async def add_appointment_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:"
    )
    await state.set_state(AdminStates.waiting_for_name)

@router.message(AdminStates.waiting_for_name, admin_filter)
async def process_client_name(message: Message, state: FSMContext):
    await state.update_data(client_name=message.text)
    
    procedures = get_procedures()
    keyboard = []
    for procedure in procedures:
        keyboard.append([
            InlineKeyboardButton(
                text=f"{procedure.name} ({procedure.duration}—á)",
                callback_data=f"proc_{procedure.id}"
            )
        ])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(AdminStates.waiting_for_procedure)

@router.callback_query(AdminStates.waiting_for_procedure, F.data.startswith("proc_"))
async def process_admin_procedure_selection(callback: CallbackQuery, state: FSMContext):
    procedure_id = int(callback.data.split("_")[1])
    procedure = get_procedure_by_id(procedure_id)
    
    await state.update_data(procedure_id=procedure_id)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ username –∫–ª–∏–µ–Ω—Ç–∞ –≤ Telegram (–±–µ–∑ @):"
    )
    await state.set_state(AdminStates.waiting_for_username)

@router.message(AdminStates.waiting_for_username, admin_filter)
async def process_client_username(message: Message, state: FSMContext):
    username = message.text.strip()
    db = next(get_db())
    
    # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ username
    client = db.query(Client).filter(Client.username == username).first()
    
    if not client:
        await message.answer(
            f"–ö–ª–∏–µ–Ω—Ç —Å username @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
        )
        await state.clear()
        return
    
    await state.update_data(client_id=client.id)
    
    available_dates = get_available_slots()
    if not available_dates:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=create_dates_keyboard(available_dates)
    )
    await state.set_state(AdminStates.waiting_for_date)

@router.callback_query(AdminStates.waiting_for_date, admin_filter)
async def process_admin_date_selection(callback: CallbackQuery, state: FSMContext):
    selected_date = datetime.strptime(callback.data.split("_")[1], "%Y-%m-%d")
    data = await state.get_data()
    procedure_id = data['procedure_id']
    procedure = get_procedure_by_id(procedure_id)
    
    await state.update_data(selected_date=selected_date)
    
    available_times = get_available_slots(selected_date)
    if not available_times:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É."
        )
        return

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure.name}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {procedure.duration}—á\n"
        f"–î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=create_times_keyboard(available_times)
    )
    await state.set_state(AdminStates.waiting_for_time)

@router.callback_query(AdminStates.waiting_for_time, admin_filter)
async def process_admin_time_selection(callback: CallbackQuery, state: FSMContext):
    selected_time = callback.data.split("_")[1]
    data = await state.get_data()
    selected_date = data['selected_date']
    procedure_id = data['procedure_id']
    procedure = get_procedure_by_id(procedure_id)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    appointment_datetime = datetime.combine(
        selected_date.date(),
        datetime.strptime(selected_time, "%H:%M").time()
    )
    
    await state.update_data(appointment_datetime=appointment_datetime)
    
    await callback.message.edit_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure.name}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {procedure.duration}—á\n"
        f"–î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {selected_time}",
        reply_markup=create_confirmation_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_phone)

@router.callback_query(AdminStates.waiting_for_phone, F.data == "confirm", admin_filter)
async def process_admin_confirmation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    appointment_datetime = data['appointment_datetime']
    client_id = data['client_id']
    procedure_id = data['procedure_id']
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    client = db.query(Client).filter(Client.id == client_id).first()
    
    if not client:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.clear()
        return
    
    appointment = create_appointment(db, client.id, procedure_id, appointment_datetime)
    
    await callback.message.edit_text(
        f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.name} (@{client.username})\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {appointment.procedure.name}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {appointment.procedure.duration}—á\n"
        f"üìÖ –î–∞—Ç–∞: {appointment_datetime.strftime('%d.%m.%Y')}\n"
        f"üïí –í—Ä–µ–º—è: {appointment_datetime.strftime('%H:%M')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    await notify_admins_about_new_appointment(callback.bot, appointment)
    
    await state.clear()

@router.message(F.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", admin_filter)
async def send_reminder_start(message: Message):
    db = next(get_db())
    today = datetime.now().date()
    appointments = db.query(Appointment).filter(
        Appointment.date >= today,
        Appointment.status == 'scheduled'
    ).all()
    
    if not appointments:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for app in appointments:
        client = app.client
        text += (
            f"ID: {app.id}\n"
            f"üìÖ {app.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë§ {client.name}\n\n"
        )
    
    await message.answer(text, reply_markup=create_appointments_keyboard(appointments))

@router.callback_query(F.data.startswith("remind_"))
async def process_reminder_selection(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    appointment_id = int(callback.data.split("_")[1])
    db = next(get_db())
    appointment = db.query(Appointment).filter(Appointment.id == appointment_id).first()
    
    if not appointment:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    if not appointment.client.telegram_id:
        await callback.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω Telegram ID", 
            show_alert=True
        )
        return
    
    try:
        await send_reminder(callback.bot, appointment.client.telegram_id, appointment)
        await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        await callback.message.edit_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {appointment.client.name}\n"
            f"üìÖ –î–∞—Ç–∞: {appointment.date.strftime('%d.%m.%Y %H:%M')}"
        )
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("delete_"))
async def process_appointment_deletion(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    appointment_id = int(callback.data.split("_")[1])
    db = next(get_db())
    
    try:
        if delete_appointment(db, appointment_id):
            await callback.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
            today = datetime.now().date()
            appointments = db.query(Appointment).filter(
                Appointment.date >= today,
                Appointment.status == 'scheduled'
            ).order_by(Appointment.date).all()
            
            if not appointments:
                await callback.message.edit_text("–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
            else:
                text = "üìä –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:\n\n"
                for app in appointments:
                    client = app.client
                    text += (
                        f"ID: {app.id}\n"
                        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {app.procedure.name}\n"
                        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {app.procedure.duration}—á\n"
                        f"üìÖ {app.date.strftime('%d.%m.%Y %H:%M')}\n"
                        f"üë§ {client.name} (@{client.username})\n"
                        f"üì± {client.phone or '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                    )
                await callback.message.edit_text(text, reply_markup=create_appointments_list_keyboard(appointments))
        else:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}", show_alert=True)

@router.message(F.text == "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç–∞–º–∏", admin_filter)
async def manage_dates(message: Message):
    db = next(get_db())
    today = datetime.now().date()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π
    inactive_slots = db.query(InactiveSlot).filter(
        InactiveSlot.date >= today
    ).order_by(InactiveSlot.date, InactiveSlot.time).all()
    
    if not inactive_slots:
        await message.answer(
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_dates_management_keyboard()
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
    slots_by_date = {}
    for slot in inactive_slots:
        date_str = slot.date.strftime("%d.%m.%Y")
        if date_str not in slots_by_date:
            slots_by_date[date_str] = []
        slots_by_date[date_str].append(slot.time)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "üìÖ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã:\n\n"
    for date_str, times in slots_by_date.items():
        text += f"üìÖ {date_str}:\n"
        for time in sorted(times):
            text += f"‚Ä¢ {time}\n"
        text += "\n"
    
    await message.answer(
        text + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_dates_management_keyboard()
    )

@router.callback_query(F.data == "add_inactive_slot", admin_filter)
async def add_inactive_slot_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    await state.set_state(AdminStates.waiting_for_inactive_date)

@router.callback_query(F.data == "remove_inactive_slot", admin_filter)
async def remove_inactive_slot_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    await state.set_state(AdminStates.waiting_for_inactive_date_removal)

@router.message(AdminStates.waiting_for_inactive_date, admin_filter)
async def process_inactive_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(inactive_date=date)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = get_available_slots(date)
        if not available_slots:
            await message.answer(
                f"–ù–∞ –¥–∞—Ç—É {date.strftime('%d.%m.%Y')} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
            )
            await state.clear()
            return
        
        keyboard = []
        for slot in available_slots:
            keyboard.append([
                InlineKeyboardButton(
                    text=slot,
                    callback_data=f"inactive_time_{slot}"
                )
            ])
        
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {date.strftime('%d.%m.%Y')}:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(AdminStates.waiting_for_inactive_time)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì"
        )

@router.callback_query(AdminStates.waiting_for_inactive_time, F.data.startswith("inactive_time_"))
async def process_inactive_time(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    date = data['inactive_date']
    time = callback.data.split("_")[2]
    db = next(get_db())
    
    print(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç: –¥–∞—Ç–∞={date}, –≤—Ä–µ–º—è={time}")
    
    if set_inactive_slot(db, date, time):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        inactive_slots = get_inactive_slots(db, date)
        print(f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {[slot.time for slot in inactive_slots]}")
        
        await callback.answer(f"‚úÖ –°–ª–æ—Ç {time} –Ω–∞ {date.strftime('%d.%m.%Y')} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ.")
    else:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ {time} –Ω–∞ {date.strftime('%d.%m.%Y')}.")
    
    await state.clear()
    await manage_dates(callback.message)

@router.message(AdminStates.waiting_for_inactive_date_removal, admin_filter)
async def process_inactive_date_removal(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y").date()
        db = next(get_db())
        inactive_slots = get_inactive_slots(db, date)
        
        if not inactive_slots:
            await message.answer(
                f"–ù–∞ –¥–∞—Ç—É {date.strftime('%d.%m.%Y')} –Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
            )
            await state.clear()
            return
        
        keyboard = []
        for slot in inactive_slots:
            if not slot.is_weekend:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –≤—ã—Ö–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"{slot.time}",
                        callback_data=f"remove_inactive_{date.strftime('%Y-%m-%d')}_{slot.time}"
                    )
                ])
        
        if not keyboard:
            await message.answer(
                f"–ù–∞ –¥–∞—Ç—É {date.strftime('%d.%m.%Y')} –Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (–∫—Ä–æ–º–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö)."
            )
            await state.clear()
            return
        
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ {date.strftime('%d.%m.%Y')}:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(AdminStates.waiting_for_inactive_time_removal)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì"
        )

@router.callback_query(AdminStates.waiting_for_inactive_time_removal, F.data.startswith("remove_inactive_"))
async def process_inactive_time_removal(callback: CallbackQuery, state: FSMContext):
    _, date_str, time = callback.data.split("_")
    date = datetime.strptime(date_str, "%Y-%m-%d").date()
    db = next(get_db())
    
    if remove_inactive_slot(db, date, time):
        await callback.answer(f"‚úÖ –°–ª–æ—Ç {time} –Ω–∞ {date.strftime('%d.%m.%Y')} —É–¥–∞–ª–µ–Ω –∏–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö.")
    else:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ {time} –Ω–∞ {date.strftime('%d.%m.%Y')}.")
    
    await state.clear()
    await manage_dates(callback.message)

def create_admin_keyboard():
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")],
            [KeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
            [KeyboardButton(text="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç–∞–º–∏")]
        ],
        resize_keyboard=True
    )

def create_dates_keyboard(dates):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []
    for date in dates:
        keyboard.append([
            InlineKeyboardButton(
                text=date.strftime("%d.%m.%Y"),
                callback_data=f"date_{date.strftime('%Y-%m-%d')}"
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_times_keyboard(times):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []
    for time in times:
        keyboard.append([
            InlineKeyboardButton(
                text=time,
                callback_data=f"time_{time}"
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_confirmation_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
            ]
        ]
    )

def create_appointments_keyboard(appointments):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []
    for app in appointments:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ {app.id}",
                callback_data=f"remind_{app.id}"
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_appointments_list_keyboard(appointments):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []
    for app in appointments:
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {app.id}",
                callback_data=f"delete_{app.id}"
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_dates_management_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç", callback_data="add_inactive_slot"),
                InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç", callback_data="remove_inactive_slot")
            ]
        ]
    ) 