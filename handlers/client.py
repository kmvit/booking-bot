from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from models.database import get_db, Client, Appointment
from services.booking import (
    get_available_slots, create_appointment, cancel_appointment,
    get_procedures, get_procedure_by_id,
    notify_admins_about_new_appointment
)

router = Router()

class BookingStates(StatesGroup):
    selecting_procedure = State()
    selecting_date = State()
    selecting_time = State()
    confirming = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_client_keyboard()
    )

@router.message(F.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_booking(message: Message, state: FSMContext):
    procedures = get_procedures()
    keyboard = []
    for procedure in procedures:
        keyboard.append([
            InlineKeyboardButton(
                text=f"{procedure.name} ({procedure.duration}—á)",
                callback_data=f"proc_{procedure.id}"
            )
        ])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(BookingStates.selecting_procedure)

@router.callback_query(BookingStates.selecting_procedure, F.data.startswith("proc_"))
async def process_procedure_selection(callback: CallbackQuery, state: FSMContext):
    procedure_id = int(callback.data.split("_")[1])
    procedure = get_procedure_by_id(procedure_id)
    
    await state.update_data(procedure_id=procedure_id)
    
    available_dates = get_available_slots()
    if not available_dates:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()
        return

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure.name}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {procedure.duration}—á\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=create_dates_keyboard(available_dates)
    )
    await state.set_state(BookingStates.selecting_date)

@router.callback_query(BookingStates.selecting_date, F.data.startswith("date_"))
async def process_date_selection(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.split("_")[1]
    date = datetime.strptime(date_str, "%Y-%m-%d").date()
    await state.update_data(appointment_date=date)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    available_slots = get_available_slots(date)
    
    if not available_slots:
        await callback.message.edit_text(
            f"–ù–∞ {date.strftime('%d.%m.%Y')} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = []
    for slot in available_slots:
        keyboard.append([
            InlineKeyboardButton(
                text=slot,
                callback_data=f"time_{slot}"
            )
        ])
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {date.strftime('%d.%m.%Y')}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(BookingStates.selecting_time)

@router.callback_query(BookingStates.selecting_time, F.data.startswith("time_"))
async def process_time_selection(callback: CallbackQuery, state: FSMContext):
    selected_time = callback.data.split("_")[1]
    data = await state.get_data()
    selected_date = data['appointment_date']
    procedure_id = data['procedure_id']
    procedure = get_procedure_by_id(procedure_id)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    appointment_datetime = datetime.combine(
        selected_date,
        datetime.strptime(selected_time, "%H:%M").time()
    )
    
    await state.update_data(appointment_datetime=appointment_datetime)
    
    await callback.message.edit_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure.name}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {procedure.duration}—á\n"
        f"–î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {selected_time}",
        reply_markup=create_confirmation_keyboard()
    )
    await state.set_state(BookingStates.confirming)

@router.callback_query(BookingStates.confirming, F.data == "confirm")
async def process_confirmation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    appointment_datetime = data['appointment_datetime']
    procedure_id = data['procedure_id']
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    db = next(get_db())
    client = db.query(Client).filter(Client.telegram_id == callback.from_user.id).first()
    
    if not client:
        client = Client(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            name=callback.from_user.full_name
        )
        db.add(client)
        db.commit()
    
    try:
        appointment = create_appointment(db, client.id, procedure_id, appointment_datetime)
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {appointment.procedure.name}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {appointment.procedure.duration}—á\n"
            f"–î–∞—Ç–∞: {appointment.date.strftime('%d.%m.%Y')}\n"
            f"–í—Ä–µ–º—è: {appointment.date.strftime('%H:%M')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        bot = callback.bot
        await notify_admins_about_new_appointment(bot, appointment)
        
    except ValueError as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
        )
    
    await state.clear()

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def show_my_appointments(message: Message):
    db = next(get_db())
    client = db.query(Client).filter(Client.telegram_id == message.from_user.id).first()
    
    if not client:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    
    appointments = db.query(Appointment).filter(
        Appointment.client_id == client.id,
        Appointment.status == 'scheduled'
    ).order_by(Appointment.date).all()
    
    if not appointments:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    
    text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
    for app in appointments:
        text += (
            f"ID: {app.id}\n"
            f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {app.procedure.name}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {app.procedure.duration}—á\n"
            f"üìÖ {app.date.strftime('%d.%m.%Y %H:%M')}\n\n"
        )
    
    await message.answer(text, reply_markup=create_appointments_keyboard(appointments))

@router.callback_query(F.data.startswith("cancel_"))
async def process_cancel_selection(callback: CallbackQuery):
    appointment_id = int(callback.data.split("_")[1])
    db = next(get_db())
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client = db.query(Client).filter(Client.telegram_id == callback.from_user.id).first()
    if not client:
        await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–ø–∏—Å—å —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    appointment = db.query(Appointment).filter(
        Appointment.id == appointment_id,
        Appointment.client_id == client.id
    ).first()
    
    if not appointment:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    try:
        if cancel_appointment(db, appointment_id):
            await callback.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ {appointment.date.strftime('%d.%m.%Y %H:%M')} –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {str(e)}", show_alert=True)

def create_client_keyboard():
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")]
        ],
        resize_keyboard=True
    )

def create_dates_keyboard(dates):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []
    for date in dates:
        keyboard.append([
            InlineKeyboardButton(
                text=date.strftime("%d.%m.%Y"),
                callback_data=f"date_{date.strftime('%Y-%m-%d')}"
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_times_keyboard(times):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []
    for time in times:
        keyboard.append([
            InlineKeyboardButton(
                text=time,
                callback_data=f"time_{time}"
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_confirmation_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
            ]
        ]
    )

def create_appointments_keyboard(appointments):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = []
    for app in appointments:
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å {app.id}",
                callback_data=f"cancel_{app.id}"
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_status_emoji(status):
    status_emojis = {
        'scheduled': '‚úÖ',
        'completed': '‚úÖ',
        'cancelled': '‚ùå'
    }
    return status_emojis.get(status, '‚ùì') 